package main

import (
	"fmt"
	"math/rand"
	"time"
)

func random() {
	for i := 0; i < 10; i++ {
		a := rand.Int()
		fmt.Printf("%d / ", a)
	}
	for i := 0; i < 5; i++ {
		r := rand.Intn(8)
		fmt.Printf("%d / ", r)
	}
	fmt.Println()
	timens := int64(time.Now().Nanosecond())
	rand.Seed(timens)
	for i := 0; i < 10; i++ {
		fmt.Printf("%2.2f / ", 100*rand.Float32())
	}
}

//randomBytes generates n random bytes
//and return the generated bytes slice
func randomBytes(n int) []byte {
	timens := int64(time.Now().Nanosecond())
	rand.Seed(timens)
	bytes := make([]byte, 0, n)
	for i := 0; i < n; i++ {
		r := rand.Intn(256)
		bytes = append(bytes, byte(r))
	}
	return bytes
}

//randomInts generates n random integers
//and return the generated integers slice
func randomInts(n int) []int {
	timens := int64(time.Now().Nanosecond())
	rand.Seed(timens)
	ints := make([]int, 0, n)
	for i := 0; i < n; i++ {
		r := rand.Intn(256)
		ints = append(ints, r)
	}
	return ints
}

//randomStrings generates n random strings
//with random lengths(less than 20bytes)
//and return the generated strings slice
func randomStrings(n int) []string {
	timens := int64(time.Now().Nanosecond())
	rand.Seed(timens)
	strings := make([]string, 0, n)
	for i := 0; i < n; i++ {
		r := rand.Intn(20)
		ints := randomInts(r)
		bytes := IntsToBytes(ints)
		strings = append(strings, string(bytes))
	}
	return strings
}

//IntsToBytes converts a []int to []byte
func IntsToBytes(ints []int) []byte {
	bytes := make([]byte, 0, len(ints))
	for _, v := range ints {
		bytes = append(bytes, byte(v))
	}
	return bytes
}
